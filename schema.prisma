//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE")
}

generator client {
  provider = "prisma-client-js"
}

enum AccountNature {
  DEBTOR
  CREDITOR

  @@map("account_nature")
}

enum WorkingModalities {
  REMOTE
  PRESENT

  @@map("hr_working_modalities")
}

enum EmployeeJobState {
  RECRUIT
  OPEN

  @@map("hr_employee_job_state")
}

enum EmployeePresenceState {
  ABSENT
  PRESENT

  @@map("hr_employee_presence_state")
}

enum EmployeeDepartureReason {
  FIRED
  RESIGNED
  RETIRED
  OTHER

  @@map("hr_employee_departure_reason")
}

enum EmployeeMaritalState {
  SINGLE
  MARRIED
  COHABITANT
  WIDOWER
  DIVORCED

  @@map("hr_employee_marital_state")
}

enum EmployeeCertificateLevel {
  GRADUATE
  BACHELOR
  MASTER
  DOCTOR
  OTHER

  @@map("hr_employee_certificate_level")
}

enum OperationType {
  ACCOUNT_CASH
  ACCOUNT_ASSET
  ACCOUNT_RECEIVABLE
  ACCOUNT_PAYABLE
  ACCOUNT_TRANSFER
  ACCOUNT_RECONCILIATION
  ACCOUNT_CLOSE
  ACCOUNT_OTHER
  PRODUCT_SALE
  PRODUCT_PURCHASE
  PRODUCT_MANUFACTURE
  PRODUCT_PACKAGE
  PRODUCT_SEAL
  PRODUCT_TRANSFER
  PRODUCT_RECONCILIATION
  PRODUCT_OTHER

  @@map("operation_type")
}

enum UomType {
  REFERENCE
  SMALLER
  BIGGER

  @@map("product_uom_type")
}

enum PeriodState {
  OPENED
  CLOSED
  INACTIVE

  @@map("period_period_state")
}

enum PeriodType {
  DAILY
  WEEKLY
  MONTHLY
  ANNUALLY

  @@map("period_period_type")
}

enum IndicatorType {
  INTEGER
  LABEL

  @@map("hr_evaluation_indicator_type")
}

enum TaskPriority {
  URGENT
  HIGH
  NORMAL
  LOW

  @@map("project_task_priority")
}

enum TaskState {
  IN_PROGRESS
  DONE
  BLOCKED

  @@map("project_task_state")
}

enum ProjectVisibility {
  FOLLOWERS
  EMPLOYEES
  PORTAL

  @@map("project_project_visibility")
}

model User {
  identifier                      String                @unique() @db.VarChar(255)
  id                              Int                   @id() @default(autoincrement())
  createdAt                       DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted                       Boolean               @default(false) @map("is_deleted")
  deletedAt                       DateTime?             @map("deleted_at") @db.Timestamptz(6)
  password                        String                @db.VarChar(255)
  canLog                          Boolean               @default(true) @map("can_log")
  personId                        Int                   @unique() @map("person_id")
  createUserId                    Int?                  @map("create_user_id")
  person                          Person                @relation("user_person", fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createUser                      User?                 @relation("user_create_user", fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  jwt                             Jwt?                  @relation("jwt_user")
  socket                          Socket?               @relation("socket_user")
  operations                      Operation[]           @relation("operation_user")
  operationCounterpartUsers       Operation[]           @relation("operation_counterpart_user")
  accountMoves                    AccountMove[]         @relation("account_move_user")
  productMoves                    ProductMove[]         @relation("product_move_user")
  userPermissions                 Permission[]          @relation("user_permissions")
  pendingTransferUsers            PendingTransfer[]     @relation("pending_transfer_user")
  pendingTransferCounterpartUsers PendingTransfer[]     @relation("pending_transfer_counterpart_user")
  periodAccounts                  PeriodAccount[]       @relation("period_account_user")
  periodProducts                  PeriodProduct[]       @relation("period_product_user")
  histories                       History[]             @relation("history_update_user")
  projects                        Project[]             @relation("project_user")
  projectTasks                    ProjectTask[]         @relation("project_task_user")
  createdAccounts                 Account[]
  createdAccountMoves             AccountMove[]
  createdBonuses                  Bonus[]
  createdCurrencies               Currency[]
  createdEmployees                Employee[]
  createdEmployeeJobs             EmployeeJob[]
  createdEmployeeCategories       EmployeeCategory[]
  createdEmployeeDepartments      EmployeeDepartment[]
  createdEmployeeSkills           EmployeeSkill[]
  createdSkills                   Skill[]
  createdSkillTypes               SkillType[]
  createdSkillLevels              SkillLevel[]
  createdGenericProducts          GenericProduct[]
  createdHistories                History[]
  createdManagements              Management[]
  createdModelAccesses            ModelAccess[]
  createdOperations               Operation[]
  createdPartners                 Partner[]
  createdPersons                  Person[]
  createdProducts                 Product[]
  createdProductMoves             ProductMove[]
  createdPrices                   Price[]
  createdPendingTransfers         PendingTransfer[]
  createdPermissions              Permission[]
  createdProperties               Property[]
  createdMagnitudes               Magnitude[]
  createdEmployeeAttendances      EmployeeAttendance[]
  createdWorkingModalities        WorkingModality[]
  createdEmployeePayrolls         EmployeePayroll[]
  createdMeasures                 Measure[]
  createdUoms                     Uom[]
  createdAttributes               Attribute[]
  createdSockets                  Socket[]
  createdDimensions               Dimension[]
  createdIngredients              Ingredient[]
  createdRecipes                  Recipe[]
  createdOperationHistories       OperationHistory[]
  createdPeriods                  Period[]
  createdDividends                Dividend[]
  createdTaxes                    Tax[]
  createdPeriodDividends          PeriodDividend[]
  createdPeriodTaxes              PeriodTax[]
  createdPeriodAccounts           PeriodAccount[]
  createdPeriodProducts           PeriodProduct[]
  createdProjects                 Project[]
  createdProjectTasks             ProjectTask[]
  createdProjectTaskStages        ProjectTaskStage[]
  createdProjectTaskTags          ProjectTaskTag[]
  createdEmployeeEvaluations      EmployeeEvaluation[]
  createdEvaluationIndicators     EvaluationIndicator[]
  createdEvaluationModels         EvaluationModel[]
  createdIndicatorLabels          IndicatorLabel[]
  createdModelRatings             ModelRating[]
  createdEvaluationDetails        EvaluationDetail[]
  createdUsers                    User[]                @relation("user_create_user")

  @@map("base_user")
}

model History {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  modelName    String    @map("model_name") @db.VarChar(255)
  description  String    @db.VarChar(255)
  recordName   String    @map("record_name") @db.VarChar(255)
  recordId     Int       @map("record_id")
  fieldChanged String    @map("field_changed") @db.VarChar(255)
  oldValue     String    @map("old_value") @db.VarChar(255)
  newValue     String    @map("new_value") @db.VarChar(255)
  updateUserId Int       @map("update_user_id")
  updateUser   User      @relation("history_update_user", fields: [updateUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("base_history")
}

model Socket {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  socketId     String    @db.VarChar()
  userId       Int       @unique() @map("user_id")
  user         User      @relation("socket_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("base_socket")
}

model Partner {
  identifier   String      @unique() @db.VarChar(255)
  id           Int         @id() @default(autoincrement())
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean     @default(false) @map("is_deleted")
  deletedAt    DateTime?   @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?        @map("create_user_id")
  createUser   User?       @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  personId     Int         @unique() @map("person_id")
  isClient     Boolean     @map("is_client")
  isSupplier   Boolean     @map("is_supplier")
  managementId Int?        @map("management_id")
  management   Management? @relation(fields: [managementId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person       Person      @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  operation    Operation[]

  @@map("base_partner")
}

model Person {
  identifier   String    @unique() @db.VarChar(255)
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  firstName    String    @map("first_name") @db.VarChar(255)
  lastName     String?   @map("last_name") @db.VarChar(255)
  idCardNumber String?   @unique() @map("id_card_number") @db.VarChar(255)
  phoneNumber  String    @map("phone_number") @db.VarChar(255)
  direction    String?   @db.VarChar(255)
  partners     Partner?
  employees    Employee?
  user         User?     @relation("user_person")
  accounts     Account[]

  @@unique([idCardNumber, phoneNumber])
  @@map("base_person")
}

model Management {
  identifier   String    @unique() @db.VarChar(255)
  name         String    @unique() @db.VarChar(255)
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  partner      Partner[]

  @@map("base_management")
}

model ModelAccess {
  identifier   String     @unique() @db.VarChar(255)
  name         String     @unique() @db.VarChar(255)
  id           Int        @id() @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean    @default(false) @map("is_deleted")
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?       @map("create_user_id")
  createUser   User?      @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  modelName    String     @map("model_name") @db.VarChar(255)
  permissionId Int        @map("permission_id")
  active       Boolean    @default(true)
  permRead     Boolean    @default(false) @map("perm_read")
  permCreate   Boolean    @default(false) @map("perm_create")
  permUpdate   Boolean    @default(false) @map("perm_update")
  permDelete   Boolean    @default(false) @map("perm_delete")
  permRemove   Boolean    @default(false) @map("perm_remove")
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([modelName, permissionId])
  @@map("base_model_access")
}

model Permission {
  identifier           String        @unique() @db.VarChar(255)
  name                 String        @unique() @db.VarChar(255)
  id                   Int           @id() @default(autoincrement())
  createdAt            DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted            Boolean       @default(false) @map("is_deleted")
  deletedAt            DateTime?     @map("deleted_at") @db.Timestamptz(6)
  createUserId         Int?          @map("create_user_id")
  createUser           User?         @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  description          String        @db.VarChar(255)
  modelAccess          ModelAccess[]
  parentPermissions    Permission[]  @relation("permission_permission")
  inheritedPermissions Permission[]  @relation("permission_permission")
  userPermissions      User[]        @relation("user_permissions")

  @@map("base_permission")
}

model Jwt {
  id        Int       @id() @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted Boolean   @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)
  token     String    @unique() @db.VarChar(255)
  userId    Int       @unique()
  user      User      @relation("jwt_user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("jwt")
}

model Account {
  identifier         String          @unique() @db.VarChar(255)
  name               String          @unique() @db.VarChar(255)
  id                 Int             @id() @default(autoincrement())
  createdAt          DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted          Boolean         @default(false) @map("is_deleted")
  deletedAt          DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createUserId       Int?            @map("create_user_id")
  createUser         User?           @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  number             String          @unique() @db.VarChar(255)
  nature             AccountNature
  govDescription     String?         @db.VarChar(5000)
  comDescription     String?         @db.VarChar(5000)
  expireAt           DateTime?       @map("expire_at") @db.Timestamptz(6)
  currencyId         Int             @map("currency_id")
  personId           Int?            @map("person_id")
  parentId           Int?            @map("parent_id")
  currency           Currency        @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person             Person?         @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parent             Account?        @relation("account_parent_children", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  children           Account[]       @relation("account_parent_children")
  accountMoves       AccountMove[]
  periodAccounts     PeriodAccount[]
  jobExpenseAccounts EmployeeJob[]

  @@map("account_account")
}

model Currency {
  identifier        String            @unique() @db.VarChar(255)
  name              String            @unique() @db.VarChar(255)
  id                Int               @id() @default(autoincrement())
  createdAt         DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted         Boolean           @default(false) @map("is_deleted")
  deletedAt         DateTime?         @map("deleted_at") @db.Timestamptz(6)
  createUserId      Int?              @map("create_user_id")
  createUser        User?             @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  isMain            Boolean           @default(false) @map("is_main")
  rate              Float
  externalRate      Float             @map("external_rate")
  account           Account[]
  operation         Operation[]
  workingModalities WorkingModality[]
  employeePayrolls  EmployeePayroll[]

  @@map("account_currency")
}

model Employee {
  identifier                String                    @unique() @db.VarChar(255)
  id                        Int                       @id() @default(autoincrement())
  createdAt                 DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted                 Boolean                   @default(false) @map("is_deleted")
  deletedAt                 DateTime?                 @map("deleted_at") @db.Timestamptz(6)
  createUserId              Int?                      @map("create_user_id")
  createUser                User?                     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  emergencyContact          String?                   @map("emergency_contact") @db.VarChar(255)
  emergencyPhone            String?                   @map("emergency_phone") @db.VarChar(255)
  departureDescription      String?                   @map("departure_description") @db.VarChar(255)
  houseWorkDistance         Float?                    @default(0) @map("house_work_distance")
  jobId                     Int                       @map("job_id")
  departmentId              Int?                      @map("department_id")
  managerId                 Int?                      @map("manager_id")
  personId                  Int                       @unique() @map("person_id")
  departureDate             DateTime?                 @map("departure_date") @db.Timestamptz(6)
  presenceState             EmployeePresenceState     @default(ABSENT) @map("presence_state")
  certificate               EmployeeCertificateLevel?
  marital                   EmployeeMaritalState?
  departureReason           EmployeeDepartureReason?  @map("departure_reason")
  job                       EmployeeJob               @relation(fields: [jobId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skills                    EmployeeSkill[]
  departmentsWhereIsManager EmployeeDepartment[]      @relation("department_manager")
  department                EmployeeDepartment?       @relation("department_members", fields: [departmentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  manager                   Employee?                 @relation("employee_employee", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subordinates              Employee[]                @relation("employee_employee")
  person                    Person                    @relation(fields: [personId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categories                EmployeeCategory[]        @relation("hr_employee_categories")
  attendances               EmployeeAttendance[]
  payrolls                  EmployeePayroll[]
  evaluations               EmployeeEvaluation[]

  @@map("hr_employee")
}

model EmployeePayroll {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  amount       Float
  mainAmount   Float     @map("main_amount")
  employeeId   Int       @map("employee_id")
  currencyId   Int       @map("currency_id")
  operationId  Int       @map("operation_id")
  date         DateTime  @default(now()) @db.Timestamptz(6)
  employee     Employee  @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currency     Currency  @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  operation    Operation @relation(fields: [operationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("hr_employee_payroll")
}

model EmployeeAttendance {
  id                Int             @id() @default(autoincrement())
  createdAt         DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted         Boolean         @default(false) @map("is_deleted")
  deletedAt         DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createUserId      Int?            @map("create_user_id")
  createUser        User?           @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  employeeId        Int             @map("employee_id")
  checkIn           DateTime        @default(now()) @map("check_in") @db.Timestamptz(6)
  checkOut          DateTime?       @map("check_out") @db.Timestamptz(6)
  workedHours       Float?          @default(0) @map("worked_hours")
  workingModalityId Int             @map("working_modality_id")
  employee          Employee        @relation(fields: [employeeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  modality          WorkingModality @relation(fields: [workingModalityId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("hr_employee_attendance")
}

model EmployeeCategory {
  id           Int        @id() @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean    @default(false) @map("is_deleted")
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?       @map("create_user_id")
  createUser   User?      @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String     @unique() @db.VarChar(255)
  description  String?    @db.VarChar(255)
  employees    Employee[] @relation("hr_employee_categories")

  @@map("hr_employee_category")
}

model EmployeeJob {
  id                 Int                 @id() @default(autoincrement())
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted          Boolean             @default(false) @map("is_deleted")
  deletedAt          DateTime?           @map("deleted_at") @db.Timestamptz(6)
  createUserId       Int?                @map("create_user_id")
  createUser         User?               @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name               String              @db.VarChar(255)
  description        String?             @db.VarChar(255)
  requirements       String              @db.VarChar(255)
  expectedEmployees  Int?                @default(0) @map("expected_employees")
  noOfEmployees      Int?                @default(0) @map("no_of_employees")
  noOfRecruitment    Int?                @default(1) @map("no_of_recruitment")
  noOfHiredEmployees Int?                @default(0) @map("no_of_hired_employees")
  expenseAccountId   Int                 @map("expense_account_id")
  departmentId       Int?                @map("department_id")
  state              EmployeeJobState    @default(OPEN)
  expenseAccount     Account             @relation(fields: [expenseAccountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department         EmployeeDepartment? @relation(fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  employees          Employee[]
  workingModalities  WorkingModality[]

  @@unique([name, departmentId])
  @@map("hr_employee_job")
}

model EmployeeDepartment {
  id           Int                  @id() @default(autoincrement())
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean              @default(false) @map("is_deleted")
  deletedAt    DateTime?            @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?                 @map("create_user_id")
  createUser   User?                @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String               @db.VarChar(255)
  description  String?              @db.VarChar(255)
  managerId    Int?                 @map("manager_id")
  parentId     Int?                 @map("parent_id")
  parent       EmployeeDepartment?  @relation("department_department", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  children     EmployeeDepartment[] @relation("department_department")
  manager      Employee?            @relation("department_manager", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  members      Employee[]           @relation("department_members")
  jobs         EmployeeJob[]

  @@map("hr_employee_department")
}

model EmployeeSkill {
  id           Int        @id() @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean    @default(false) @map("is_deleted")
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?       @map("create_user_id")
  createUser   User?      @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  employeeId   Int        @map("employee_id")
  skillId      Int        @map("skill_id")
  skillLevelId Int        @map("skill_level_id")
  skillTypeId  Int        @map("skill_type_id")
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  skill        Skill      @relation(fields: [skillId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skillLevel   SkillLevel @relation(fields: [skillLevelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  skillType    SkillType  @relation(fields: [skillTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([employeeId, skillId])
  @@map("hr_employee_skill")
}

model SkillType {
  id             Int             @id() @default(autoincrement())
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted      Boolean         @default(false) @map("is_deleted")
  deletedAt      DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createUserId   Int?            @map("create_user_id")
  createUser     User?           @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name           String          @db.VarChar(255)
  skills         Skill[]
  skillLevels    SkillLevel[]
  employeeSkills EmployeeSkill[]

  @@map("hr_skill_type")
}

model Skill {
  id             Int             @id() @default(autoincrement())
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted      Boolean         @default(false) @map("is_deleted")
  deletedAt      DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createUserId   Int?            @map("create_user_id")
  createUser     User?           @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name           String          @db.VarChar(255)
  skillTypeId    Int?            @map("skill_type_id")
  skillType      SkillType?      @relation(fields: [skillTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employeeSkills EmployeeSkill[]

  @@map("hr_skill")
}

model SkillLevel {
  id             Int             @id() @default(autoincrement())
  createdAt      DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted      Boolean         @default(false) @map("is_deleted")
  deletedAt      DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createUserId   Int?            @map("create_user_id")
  createUser     User?           @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name           String          @db.VarChar(255)
  levelProgress  Int             @map("level_progress")
  skillTypeId    Int?            @map("skill_type_id")
  skillType      SkillType?      @relation(fields: [skillTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employeeSkills EmployeeSkill[]

  @@map("hr_skill_level")
}

model WorkingModality {
  id           Int                  @id() @default(autoincrement())
  createdAt    DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean              @default(false) @map("is_deleted")
  deletedAt    DateTime?            @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?                 @map("create_user_id")
  createUser   User?                @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String               @unique() @map("name") @db.VarChar(255)
  type         WorkingModalities    @map("type")
  salary       Float                @map("salary")
  currencyId   Int                  @map("currency_id")
  jobId        Int                  @map("job_id")
  job          EmployeeJob          @relation(fields: [jobId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currency     Currency             @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  attendances  EmployeeAttendance[]

  @@unique([name, salary, currencyId, jobId])
  @@map("hr_working_modality")
}

model Operation {
  id                Int                @id() @default(autoincrement())
  createdAt         DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted         Boolean            @default(false) @map("is_deleted")
  deletedAt         DateTime?          @map("deleted_at") @db.Timestamptz(6)
  createUserId      Int?               @map("create_user_id")
  createUser        User?              @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  type              OperationType
  userId            Int                @map("user_id")
  periodId          Int?               @map("period_id")
  description       String             @db.VarChar(255)
  partnerId         Int?               @map("partner_id")
  currencyId        Int?               @map("currency_id")
  rate              Float?
  isInput           Boolean?           @map("is_input")
  counterpartUserId Int?               @map("counterpart_user_id")
  recipeId          Int?               @map("recipe_id")
  accountMoves      AccountMove[]
  currency          Currency?          @relation(fields: [currencyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bonuses           Bonus[]            @relation("operation_operation_bonuses")
  counterpartUser   User?              @relation("operation_counterpart_user", fields: [counterpartUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partner           Partner?           @relation(fields: [partnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  period            Period?            @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User               @relation("operation_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  newOperation      OperationHistory[] @relation("operation_history_new_operation")
  oldOperation      OperationHistory[] @relation("operation_history_old_operation")
  productMoves      ProductMove[]
  employeePayrolls  EmployeePayroll[]

  @@map("operation_operation")
}

model OperationHistory {
  id             Int       @id() @default(autoincrement())
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted      Boolean   @default(false) @map("is_deleted")
  deletedAt      DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId   Int?      @map("create_user_id")
  createUser     User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  oldOperationId Int       @map("old_operation_id")
  newOperationId Int       @map("new_operation_id")
  editedAt       DateTime  @default(now()) @map("edited_at") @db.Timestamptz(6)
  newOperation   Operation @relation("operation_history_new_operation", fields: [newOperationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  oldOperation   Operation @relation("operation_history_old_operation", fields: [oldOperationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("operation_operation_history")
}

model AccountMove {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  operationId  Int       @map("operation_id")
  accountId    Int       @map("account_id")
  userId       Int       @map("user_id")
  debit        Float     @default(0)
  credit       Float     @default(0)
  amount       Float     @map("amount")
  account      Account   @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  operation    Operation @relation(fields: [operationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user         User      @relation("account_move_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("operation_account_move")
}

model ProductMove {
  id                Int       @id() @default(autoincrement())
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted         Boolean   @default(false) @map("is_deleted")
  deletedAt         DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId      Int?      @map("create_user_id")
  createUser        User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  operationId       Int       @map("operation_id")
  productId         Int       @map("product_id")
  userId            Int       @map("user_id")
  uomId             Int       @map("uom_id")
  quantityIn        Float     @default(0) @map("quantity_in")
  quantityOut       Float     @default(0) @map("quantity_out")
  unitInternalCost  Float     @default(0) @map("unit_internal_cost")
  unitExternalValue Float     @default(0) @map("unit_external_value")
  operation         Operation @relation(fields: [operationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product           Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user              User      @relation("product_move_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uom               Uom       @relation(fields: [uomId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("operation_product_move")
}

model PendingTransfer {
  id                Int           @id() @default(autoincrement())
  createdAt         DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted         Boolean       @default(false) @map("is_deleted")
  deletedAt         DateTime?     @map("deleted_at") @db.Timestamptz(6)
  createUserId      Int?          @map("create_user_id")
  createUser        User?         @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  userId            Int           @map("user_id")
  counterpartUserId Int           @map("counterpart_user_id")
  type              OperationType
  createJson        String        @map("create_json")
  confirmed         Boolean?      @map("confirmed")
  confirmedAt       DateTime?     @map("confirmed_at") @db.Timestamptz(6)
  user              User          @relation("pending_transfer_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  counterpartUser   User          @relation("pending_transfer_counterpart_user", fields: [counterpartUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("operation_pending_transfer")
}

model Bonus {
  id           Int         @id() @default(autoincrement())
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean     @default(false) @map("is_deleted")
  deletedAt    DateTime?   @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?        @map("create_user_id")
  createUser   User?       @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String      @db.VarChar()
  value        Float
  isPercentage Boolean     @map("is_percentage")
  operations   Operation[] @relation("operation_operation_bonuses")

  @@map("operation_bonus")
}

model Product {
  identifier       String          @unique() @db.VarChar(255)
  name             String          @unique() @db.VarChar(255)
  id               Int             @id() @default(autoincrement())
  createdAt        DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted        Boolean         @default(false) @map("is_deleted")
  deletedAt        DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createUserId     Int?            @map("create_user_id")
  createUser       User?           @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  genericProductId Int             @map("generic_product_id")
  uomId            Int             @map("uom_id")
  periodicalCost   Float           @default(0) @map("periodical_cost")
  genericProduct   GenericProduct  @relation(fields: [genericProductId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uom              Uom             @relation(fields: [uomId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  dimensions       Dimension[]     @relation("product_product_dimensions")
  properties       Property[]      @relation("product_product_properties")
  ingredients      Ingredient[]
  periodProducts   PeriodProduct[]
  productMoves     ProductMove[]
  prices           Price[]
  recipes          Recipe[]

  @@map("product_product")
}

model GenericProduct {
  identifier   String    @unique() @db.VarChar(255)
  name         String    @unique() @db.VarChar(255)
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  products     Product[]

  @@map("product_generic_product")
}

model Dimension {
  identifier   String    @unique() @db.VarChar(255)
  name         String    @unique() @db.VarChar(255)
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  value        Float
  measureId    Int       @map("measure_id")
  uomId        Int       @map("uom_id")
  measure      Measure   @relation(fields: [measureId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  uom          Uom       @relation(fields: [uomId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products     Product[] @relation("product_product_dimensions")

  @@map("product_dimension")
}

model Property {
  identifier   String    @unique() @db.VarChar(255)
  name         String    @unique() @db.VarChar(255)
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  attributeId  Int       @map("attribute_id")
  attribute    Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products     Product[] @relation("product_product_properties")

  @@map("product_property")
}

model Attribute {
  identifier   String     @unique() @db.VarChar(255)
  name         String     @unique() @db.VarChar(255)
  id           Int        @id() @default(autoincrement())
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean    @default(false) @map("is_deleted")
  deletedAt    DateTime?  @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?       @map("create_user_id")
  createUser   User?      @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  Property     Property[]

  @@map("product_attribute")
}

model Measure {
  identifier   String      @unique() @db.VarChar(255)
  name         String      @unique() @db.VarChar(255)
  id           Int         @id() @default(autoincrement())
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean     @default(false) @map("is_deleted")
  deletedAt    DateTime?   @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?        @map("create_user_id")
  createUser   User?       @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  magnitudeId  Int         @map("magnitude_id")
  magnitude    Magnitude   @relation(fields: [magnitudeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  dimensions   Dimension[]

  @@map("product_measure")
}

model Uom {
  identifier   String        @unique() @db.VarChar(255)
  name         String        @unique() @db.VarChar(255)
  id           Int           @id() @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean       @default(false) @map("is_deleted")
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?          @map("create_user_id")
  createUser   User?         @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  factor       Float
  uomType      UomType       @map("uom_type")
  magnitudeId  Int           @map("magnitude_id")
  magnitude    Magnitude     @relation(fields: [magnitudeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  dimensions   Dimension[]
  products     Product[]
  productMove  ProductMove[]

  @@map("product_uom")
}

model Magnitude {
  identifier   String    @unique() @db.VarChar(255)
  name         String    @unique() @db.VarChar(255)
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  uoms         Uom[]
  measures     Measure[]

  @@map("product_magnitude")
}

model Price {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  productId    Int       @map("product_id")
  from         Int       @default(1)
  price        Float     @default(0)
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("product_price")
}

model Ingredient {
  id              Int       @id() @default(autoincrement())
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted       Boolean   @default(false) @map("is_deleted")
  deletedAt       DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId    Int?      @map("create_user_id")
  createUser      User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  recipeId        Int       @map("recipe_id")
  productId       Int       @map("product_id")
  consumptionRate Float     @map("consumption_rate")
  product         Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recipe          Recipe    @relation(fields: [recipeId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_ingredient")
}

model Recipe {
  id           Int          @id() @default(autoincrement())
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean      @default(false) @map("is_deleted")
  deletedAt    DateTime?    @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?         @map("create_user_id")
  createUser   User?        @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  productId    Int          @map("product_id")
  name         String       @db.VarChar(255)
  ingredient   Ingredient[]
  product      Product      @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("product_recipe")
}

model Period {
  identifier          String               @unique() @db.VarChar(255)
  id                  Int                  @id() @default(autoincrement())
  createdAt           DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted           Boolean              @default(false) @map("is_deleted")
  deletedAt           DateTime?            @map("deleted_at") @db.Timestamptz(6)
  createUserId        Int?                 @map("create_user_id")
  createUser          User?                @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  nextId              Int?                 @unique() @map("next_id")
  openedAt            DateTime             @default(now()) @map("opened_at") @db.Timestamptz(6)
  state               PeriodState
  next                Period?              @relation("period_next_previous", fields: [nextId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  previous            Period?              @relation("period_next_previous")
  operations          Operation[]
  periodAccounts      PeriodAccount[]
  periodProducts      PeriodProduct[]
  periodDividends     PeriodDividend[]
  periodTaxes         PeriodTax[]
  employeeEvaluations EmployeeEvaluation[]

  @@map("period")
}

model Dividend {
  identifier     String           @unique() @db.VarChar(255)
  name           String           @unique() @db.VarChar(255)
  id             Int              @id() @default(autoincrement())
  createdAt      DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted      Boolean          @default(false) @map("is_deleted")
  deletedAt      DateTime?        @map("deleted_at") @db.Timestamptz(6)
  createUserId   Int?             @map("create_user_id")
  createUser     User?            @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  value          Float
  isPercentage   Boolean          @map("is_percentage")
  isForUser      Boolean          @map("is_for_user")
  periodDividend PeriodDividend[]

  @@map("period_dividend")
}

model Tax {
  identifier   String      @unique() @db.VarChar(255)
  name         String      @unique() @db.VarChar(255)
  id           Int         @id() @default(autoincrement())
  createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean     @default(false) @map("is_deleted")
  deletedAt    DateTime?   @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?        @map("create_user_id")
  createUser   User?       @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  value        Float
  isPercentage Boolean     @map("is_percentage")
  isForClose   Boolean     @map("is_for_close")
  isForSale    Boolean     @map("is_for_sale")
  periodTax    PeriodTax[]

  @@map("period_tax")
}

model PeriodDividend {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  periodId     Int       @map("period_id")
  dividendId   Int       @map("dividend_id")
  value        Float
  isPercentage Boolean   @map("is_percentage")
  dividend     Dividend  @relation(fields: [dividendId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  period       Period    @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("period_period_dividend")
}

model PeriodTax {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  taxId        Int       @map("tax_id")
  periodId     Int       @map("period_id")
  value        Float
  isPercentage Boolean   @map("is_percentage")
  period       Period    @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tax          Tax       @relation(fields: [taxId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("period_period_tax")
}

model PeriodAccount {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  periodId     Int       @map("period_id")
  accountId    Int       @map("account_id")
  userId       Int       @map("user_id")
  debit        Float
  credit       Float
  amount       Float
  period       Period    @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  account      Account   @relation(fields: [accountId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User      @relation("period_account_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("period_period_account")
}

model PeriodProduct {
  id           Int       @id() @default(autoincrement())
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean   @default(false) @map("is_deleted")
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?      @map("create_user_id")
  createUser   User?     @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  periodId     Int       @map("period_id")
  productId    Int       @map("product_id")
  userId       Int       @map("user_id")
  quantityIn   Float     @map("quantity_in")
  quantityOut  Float     @map("quantity_out")
  period       Period    @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product      Product   @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         User      @relation("period_product_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("period_period_product")
}

model EmployeeEvaluation {
  id           Int                @id() @default(autoincrement())
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean            @default(false) @map("is_deleted")
  deletedAt    DateTime?          @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?               @map("create_user_id")
  createUser   User?              @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String             @unique() @db.VarChar(255)
  employeeId   Int                @map("employee_id")
  periodId     Int                @map("period_id")
  modelId      Int                @map("model_id")
  employee     Employee           @relation(fields: [employeeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  period       Period             @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  model        EvaluationModel    @relation(fields: [modelId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  details      EvaluationDetail[]

  @@unique([employeeId, modelId, periodId])
  @@map("hr_evaluation_employee_evaluation")
}

model EvaluationDetail {
  id           Int                 @id() @default(autoincrement())
  createdAt    DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean             @default(false) @map("is_deleted")
  deletedAt    DateTime?           @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?                @map("create_user_id")
  createUser   User?               @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  evaluationId Int                 @map("evaluation_id")
  indicatorId  Int                 @map("indicator_id")
  labelId      Int?                @map("label_id")
  value        Float
  evaluation   EmployeeEvaluation  @relation(fields: [evaluationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  indicator    EvaluationIndicator @relation(fields: [indicatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  label        IndicatorLabel?     @relation(fields: [labelId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("hr_evaluation_evaluation_detail")
}

model EvaluationIndicator {
  id                Int                   @id() @default(autoincrement())
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted         Boolean               @default(false) @map("is_deleted")
  deletedAt         DateTime?             @map("deleted_at") @db.Timestamptz(6)
  createUserId      Int?                  @map("create_user_id")
  createUser        User?                 @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  code              String                @db.VarChar(255)
  name              String                @db.VarChar(255)
  description       String?               @db.VarChar(255)
  minInt            Float?                @map("min_int")
  maxInt            Float?                @map("max_int")
  indicatorType     IndicatorType         @map("indicator_type")
  modelId           Int                   @map("model_id")
  parentId          Int?                  @map("parent_id")
  model             EvaluationModel       @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parent            EvaluationIndicator?  @relation("parent_indicator", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children          EvaluationIndicator[] @relation("parent_indicator")
  labels            IndicatorLabel[]
  evaluationDetails EvaluationDetail[]

  @@unique([name, modelId])
  @@map("hr_evaluation_evaluation_indicator")
}

model EvaluationModel {
  id            Int                   @id() @default(autoincrement())
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted     Boolean               @default(false) @map("is_deleted")
  deletedAt     DateTime?             @map("deleted_at") @db.Timestamptz(6)
  createUserId  Int?                  @map("create_user_id")
  createUser    User?                 @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name          String                @unique() @db.VarChar(255)
  description   String?               @db.VarChar(255)
  periodType    PeriodType            @map("period_type")
  indicatorType IndicatorType         @map("indicator_type")
  ratings       ModelRating[]
  indicators    EvaluationIndicator[]
  evaluations   EmployeeEvaluation[]

  @@map("hr_evaluation_evaluation_model")
}

model IndicatorLabel {
  id                Int                 @id() @default(autoincrement())
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted         Boolean             @default(false) @map("is_deleted")
  deletedAt         DateTime?           @map("deleted_at") @db.Timestamptz(6)
  createUserId      Int?                @map("create_user_id")
  createUser        User?               @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name              String              @db.VarChar(255)
  value             Float
  indicatorId       Int                 @map("indicator_id")
  indicator         EvaluationIndicator @relation(fields: [indicatorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  evaluationDetails EvaluationDetail[]

  @@unique([name, indicatorId])
  @@map("hr_evaluation_indicator_label")
}

model ModelRating {
  id           Int             @id() @default(autoincrement())
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean         @default(false) @map("is_deleted")
  deletedAt    DateTime?       @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?            @map("create_user_id")
  createUser   User?           @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String          @db.VarChar(255)
  minInt       Float?          @map("min_int")
  maxInt       Float?          @map("max_int")
  modelId      Int             @map("model_id")
  model        EvaluationModel @relation(fields: [modelId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([name, modelId])
  @@map("hr_evaluation_model_rating")
}

model Project {
  id           Int                @id() @default(autoincrement())
  createdAt    DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean            @default(false) @map("is_deleted")
  deletedAt    DateTime?          @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?               @map("create_user_id")
  createUser   User?              @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String             @unique() @db.VarChar(255)
  description  String?            @db.VarChar(255)
  dateStart    DateTime?          @map("date_start") @db.Timestamptz(6)
  dateEnd      DateTime?          @map("date_end") @db.Timestamptz(6)
  sequence     Int                @unique()
  color        Int
  managerId    Int?               @map("manager_id")
  visibility   ProjectVisibility
  manager      User?              @relation("project_user", fields: [managerId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  tasks        ProjectTask[]
  taskStages   ProjectTaskStage[]

  @@map("project_project")
}

model ProjectTask {
  id           Int              @id() @default(autoincrement())
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean          @default(false) @map("is_deleted")
  deletedAt    DateTime?        @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?             @map("create_user_id")
  createUser   User?            @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String           @unique() @db.VarChar(255)
  description  String?          @db.VarChar(255)
  dateStart    DateTime?        @map("date_start") @db.Timestamptz(6)
  dateEnd      DateTime?        @map("date_end") @db.Timestamptz(6)
  priority     TaskPriority     @default(NORMAL)
  plannedHours Float?           @map("planned_hours")
  sequence     Int
  kanbanState  TaskState        @map("kanban_state")
  projectId    Int              @map("project_id")
  stageId      Int              @map("stage_id")
  assignedToId Int?             @map("assigned_to_id")
  parentId     Int?             @map("parent_id")
  parent       ProjectTask?     @relation("parent_task", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children     ProjectTask[]    @relation("parent_task")
  assignedTo   User?            @relation("project_task_user", fields: [assignedToId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  stage        ProjectTaskStage @relation(fields: [stageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  project      Project          @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tags         ProjectTaskTag[]

  @@unique([projectId, stageId, sequence])
  @@map("project_project_task")
}

model ProjectTaskStage {
  id           Int           @id() @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean       @default(false) @map("is_deleted")
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?          @map("create_user_id")
  createUser   User?         @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String        @unique() @db.VarChar(255)
  description  String?       @db.VarChar(255)
  sequence     Int           @unique()
  isFolded     Boolean       @map("is_folded")
  projects     Project[]
  tasks        ProjectTask[]

  @@map("project_project_task_stage")
}

model ProjectTaskTag {
  id           Int           @id() @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted    Boolean       @default(false) @map("is_deleted")
  deletedAt    DateTime?     @map("deleted_at") @db.Timestamptz(6)
  createUserId Int?          @map("create_user_id")
  createUser   User?         @relation(fields: [createUserId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  name         String        @unique() @db.VarChar(255)
  color        Int
  tasks        ProjectTask[]

  @@map("project_project_task_tag")
}
